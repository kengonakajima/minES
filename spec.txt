minES エコー抑圧サンプル 動作仕様
=================================

1. 処理条件と基本設計
----------------------
- サンプリング周波数: 16 kHz （固定）
- ブロック長: 160 サンプル（約 10 ms）
- 処理対象: 実遠端信号 `far[n]` とマイク信号 `mic[n]`
- 出力: 抑圧ゲートを適用したマイク信号 `out[n]`
- サプレッサはブロック単位で動作し、各ブロックの最後に更新されたゲインを次ブロックへ持ち越す。

2. ブロック処理パイプライン
------------------------------
```
┌────────────┐   ┌──────────┐   ┌─────────────┐   ┌─────────┐
│  遠端履歴  │──▶│ AMDF探索 │──▶│ ゲート判定 & │──▶│ ゲイン適用 │
│  バッファ  │   │ (差分)  │   │ パワー判定   │   │ （抑圧出力）│
└────────────┘   └──────────┘   └─────────────┘   └─────────┘
        ▲                   │               │                    │
        │                   ▼               ▼                    ▼
     遠端入力         遅延候補ラグ     ハングオーバ制御     ブロック出力
```

3. ブロックごとの処理手順
--------------------------
1. 遠端ブロックを履歴バッファ（リング）へ書き込む。
2. マイクブロックの電力 `P_mic = \sum_{i=0}^{B-1} mic_i^2` を計算し、下限 `1e-9` でクリップ。
3. 遅延探索は平均絶対差関数 (AMDF, Average Magnitude Difference Function) を用いて行う。`B` はブロック長、`far_{lag,i}` は遅延後の遠端サンプル。

   `D(lag) = \sum_{i=0}^{B-1} |far_{lag,i} - mic_i|`

   `A(lag) = \sum_{i=0}^{B-1} |far_{lag,i}|`

   類似度スコアは `ρ(lag) = 1 - D(lag) / (A(lag) + \sum_{i=0}^{B-1} |mic_i|)` とし、0〜1付近の範囲で大きいほどエコーに近いとみなす。

   検索は 1 ms ごとの間引き（`lag_step = max(1, fs/1000)`）で `lag ∈ [0, max_lag]` を走査し、最大スコアを与える `ρ_best` と `lag_best` を取得する。
4. `lag_best` における遠端電力 `P_far_best` を再計算し、下限 `1e-9` でクリップ。
5. エコー検出条件:
   - `ρ_best > rho_thresh`
   - `P_mic < power_ratio_alpha · P_far_best`
   条件を満たすと抑圧フラグ `suppress = true`。
6. ハングオーバ制御: 抑圧が成立した場合 `hang_cnt = hangover_blocks` にリロードし、抑圧が連続して継続する。カウンタが正の間は抑圧を維持する。
7. ターゲットゲインを設定:
   - 抑圧中 `target = atten_linear`（dB 指定値を線形変換）
   - 非抑圧時 `target = 1.0`
8. ゲイン追従: 現在ゲイン `g` を攻撃係数 `attack`／解放係数 `release` で一次平滑化する。

   `coeff = (target < g) ? attack : release`

   `g_new = (1 - coeff) · g + coeff · target`

   これにより急激な変化を抑えたトランジションを実現。
9. 出力生成: `out_i = mic_i · g_new` を各サンプルへ適用する。必要に応じて、適用ゲイン値を外部へ返す。

4. 主なパラメータ（固定値）
---------------------------
- `rho_thresh = 0.6` : AMDFスコアのしきい値。
- `power_ratio_alpha = 1.3` : マイク/遠端パワー比の上限。`P_mic` が `α · P_far_best` 未満の時のみ抑圧する。
- `atten = -80 dB` : 抑圧時ゲイン。線形値は `atten_linear = 0.0001`。
- `hangover_blocks = 20` : 抑圧継続に使うブロック数（≒ 200 ms）。
- `attack = 0.1` / `release = 0.01` : ゲイン変化の追従係数。

これらの値は実行時に変更できません。

5. 実行時のインタフェース
----------------------------
- `EchoSuppressor::process_block(far, mic, out, applied_gain, estimated_lag)` がブロック処理の中心。最終引数は省略可能で、推定遅延サンプル数を受け取る。
- オフライン・オンライン両サンプルは同一 API を使用し、`--hang` オプションはブロック数で指定する。
- ログ出力では各ブロックのミュート率 `mute = 1 - g_new`、ゲイン `g_new`、遅延推定 `lag`（サンプル単位）を報告する。遅延が検出されないブロックでは `lag=--` を表示する。ゲインは `    ` / `*   ` / `**  ` / `*** ` / `****` の段階指標も併記する。

6. 実装上の注意
----------------
- 電力・差分計算ではゼロ除算防止のため `1e-9` の下限を設ける。
- 履歴バッファはリング構造で、最大遅延 `max_lag_samples` に対応する長さを確保しつつ、追加の余裕を持たせている。
- 遅延探索は固定ステップであり、高精度なサブサンプル遅延推定は行っていない。
- 抑圧ゲートは片方向のみ（減衰側）で即時追従させる一方、復帰時には `release` で徐々に戻す。
